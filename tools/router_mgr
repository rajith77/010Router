#!/usr/bin/env python

#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

import os
from optparse import OptionParser, OptionGroup
import sys
from proton import Messenger, Message, Timeout

#home = os.environ.get("QPID_DISPATCH_HOME")
#if not home:
#    home = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'lib', 'qpid-dispatch')
#sys.path.insert(0, os.path.join(home, "python"))

class Config:
    def __init__(self):
        self._url = "0.0.0.0"
        self._add_route = None
        self._remove_route = None

config = Config()

def OptionsAndArguments(argv):
    """ Set global variables for options, return arguments """

    global config

    usage = "usage: %prog [options]"

    parser = OptionParser(usage=usage)

    group1 = OptionGroup(parser, "Connection Options")
    group1.add_option("-b", "--bus",  action="store", type="string", default="0.0.0.0", metavar="<access-url>",
                      help="URL of the messaging bus to connect to")
    parser.add_option_group(group1)

    group2 = OptionGroup(parser, "Command Options")
    group2.add_option("-a", "--addroute", help="address/pattern/destination")
    group2.add_option("-r", "--removeroute", help="address/pattern/destination")
    parser.add_option_group(group2)

    opts, args = parser.parse_args(args=argv)
    
    if not opts.addroute and not opts.removeroute:
        parser.error("You must specify one of these options: -a, -r. For details, try $ qdstat --help")

    config._url = opts.bus
    config._add_route = opts.addroute
    config._remove_route = opts.removeroute

def updateRoute(mng, add, route):
    keys = route.split()

    msg = Message()
    #mng.route("*", "amqp://%s/$1" % config._url);
    msg.address = config._url + '/010_ROUTER'
    msg.properties = {}
    msg.properties[u'MGT_MSG'] = ''
    msg.properties[u'ADDR'] = unicode(keys[0])
    msg.properties[u'PATTERN'] = unicode(keys[1])
    msg.properties[u'DEST'] = unicode(keys[2])
    msg.properties[u'OP_CODE'] = u'ADD_ROUTE' if add else u'REMOVE_ROUTE'
    mng.put(msg)
    mng.send()
    # need to wait for settlement before printing the message.
    print "Added" if add else "Removed ", route, " from the router"

def main(argv=None):

    args = OptionsAndArguments(argv)
    try:
        mng = Messenger()
        mng.start()
        try:
            if config._add_route:
                updateRoute(mng, True, config._add_route)
            if config._remove_route:
                updateRoute(mng, False, config._remove_route)
        finally:
            mng.stop()
        return 0
    except KeyboardInterrupt:
        print
    except Timeout:
        if config._router:
            print "No response from router %s after timeout" % config._router
        else:
            print "No response after timeout"
    except Exception,e:
        print "%s: %s - %s" % (sys.argv[0], e.__class__.__name__, e)

    return 1

if __name__ == "__main__":
        sys.exit(main())
